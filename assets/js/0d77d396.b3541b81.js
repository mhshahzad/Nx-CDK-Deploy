"use strict";(self.webpackChunknx_cdk_plugin_docs=self.webpackChunknx_cdk_plugin_docs||[]).push([[2227],{1026:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=r(8168),t=(r(6540),r(5680));const i={sidebar_position:3},o="Environment Variables",l={unversionedId:"configuration/environment-variables",id:"configuration/environment-variables",title:"Environment Variables",description:"Environment variables provide a flexible way to configure your CDK applications across different deployment stages without hardcoding values.",source:"@site/docs/configuration/environment-variables.md",sourceDirName:"configuration",slug:"/configuration/environment-variables",permalink:"/nx-cdk-deploy/docs/configuration/environment-variables",draft:!1,editUrl:"https://github.com/mhshahzad/nx-cdk-deploy/tree/main/docs/docs/configuration/environment-variables.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"CDK Context Files",permalink:"/nx-cdk-deploy/docs/configuration/cdk-context"},next:{title:"Architecture Best Practices",permalink:"/nx-cdk-deploy/docs/best-practices/architecture"}},s={},c=[{value:"Overview",id:"overview",level:2},{value:"Setting Environment Variables",id:"setting-environment-variables",level:2},{value:".env Files",id:"env-files",level:3},{value:"Precedence",id:"precedence",level:3},{value:"Loading Environment Variables",id:"loading-environment-variables",level:2},{value:"Using Env Vars in CDK",id:"using-env-vars-in-cdk",level:2},{value:"Configure stacks with env-driven parameters",id:"configure-stacks-with-env-driven-parameters",level:3},{value:"Pass env vars to Lambda functions",id:"pass-env-vars-to-lambda-functions",level:3},{value:"Nx Integration",id:"nx-integration",level:2},{value:"CI/CD and Secrets",id:"cicd-and-secrets",level:2},{value:"Best Practices",id:"best-practices",level:2}],p={toc:c},d="wrapper";function g({components:e,...n}){return(0,t.yg)(d,(0,a.A)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"environment-variables"},"Environment Variables"),(0,t.yg)("p",null,"Environment variables provide a flexible way to configure your CDK applications across different deployment stages without hardcoding values."),(0,t.yg)("h2",{id:"overview"},"Overview"),(0,t.yg)("p",null,"The nx-cdk plugin supports environment variables at multiple levels:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"System-level"),": Standard environment variables from your shell"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Project-level"),": Defined in ",(0,t.yg)("inlineCode",{parentName:"li"},".env")," files"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Stage-specific"),": Override values per deployment stage")),(0,t.yg)("h2",{id:"setting-environment-variables"},"Setting Environment Variables"),(0,t.yg)("h3",{id:"env-files"},".env Files"),(0,t.yg)("p",null,"Create ",(0,t.yg)("inlineCode",{parentName:"p"},".env")," files in your project root to define environment variables:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre"},".env            # defaults for all envs\n.env.dev        # overrides for dev\n.env.staging    # overrides for staging\n.env.prod       # overrides for prod\n")),(0,t.yg)("p",null,"Example ",(0,t.yg)("inlineCode",{parentName:"p"},".env.dev"),":"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre"},"TABLE_THROUGHPUT=1\nQUEUE_BATCH_SIZE=5\nAPI_STAGE=dev\nENABLE_DLQ=true\n")),(0,t.yg)("h3",{id:"precedence"},"Precedence"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"CLI/exported variables > ",(0,t.yg)("inlineCode",{parentName:"li"},".env.<env>")," > ",(0,t.yg)("inlineCode",{parentName:"li"},".env")),(0,t.yg)("li",{parentName:"ul"},"Avoid committing secrets; prefer CI secrets, SSM, or Secrets Manager")),(0,t.yg)("h2",{id:"loading-environment-variables"},"Loading Environment Variables"),(0,t.yg)("p",null,"Use ",(0,t.yg)("inlineCode",{parentName:"p"},"dotenv")," (or equivalent) in your CDK app and/or Lambda code:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-ts"},"// cdk-app bootstrap (e.g., src/main.ts)\nimport 'dotenv/config';\n// or:\n// import * as dotenv from 'dotenv';\n// dotenv.config({ path: `.env.${process.env.NX_TASK_TARGET_CONFIGURATION ?? 'dev'}` });\n")),(0,t.yg)("p",null,"Determine which file to load based on the Nx configuration:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-ts"},"const envName = process.env.NX_TASK_TARGET_CONFIGURATION ?? 'dev';\n")),(0,t.yg)("h2",{id:"using-env-vars-in-cdk"},"Using Env Vars in CDK"),(0,t.yg)("h3",{id:"configure-stacks-with-env-driven-parameters"},"Configure stacks with env-driven parameters"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-ts"},"import { App, Stack } from 'aws-cdk-lib';\n\nconst app = new App();\nconst envName = process.env.NX_TASK_TARGET_CONFIGURATION ?? 'dev';\n\nconst writeCapacity = Number(process.env.TABLE_THROUGHPUT ?? 5);\nconst enableDlq = String(process.env.ENABLE_DLQ ?? 'true') === 'true';\n\nclass MyStack extends Stack {\n  // define resources using writeCapacity, enableDlq, etc.\n}\n\nnew MyStack(app, `orders-${envName}`);\n")),(0,t.yg)("h3",{id:"pass-env-vars-to-lambda-functions"},"Pass env vars to Lambda functions"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-ts"},"// example: lambda function environment\nmyFn.addEnvironment('TABLE_NAME', 'OrdersTable');\nmyFn.addEnvironment('LOG_LEVEL', process.env.LOG_LEVEL ?? 'info');\n")),(0,t.yg)("p",null,"In your Lambda handler:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-ts"},"export const handler = async () => {\n  const table = process.env.TABLE_NAME;\n  const level = process.env.LOG_LEVEL ?? 'info';\n};\n")),(0,t.yg)("h2",{id:"nx-integration"},"Nx Integration"),(0,t.yg)("p",null,"Select environment via Nx configuration; your code can use ",(0,t.yg)("inlineCode",{parentName:"p"},"NX_TASK_TARGET_CONFIGURATION")," to load the right ",(0,t.yg)("inlineCode",{parentName:"p"},".env.*")," file."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-bash"},"nx deploy orders --configuration=dev\nnx deploy orders --configuration=staging\nnx deploy orders --configuration=prod\n")),(0,t.yg)("p",null,"See also:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/nx-cdk-deploy/docs/configuration/project-config"},"Project Config")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/nx-cdk-deploy/docs/core-concepts/environment-management"},"Environment Management")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/nx-cdk-deploy/docs/configuration/cdk-context"},"CDK Context Files"))),(0,t.yg)("h2",{id:"cicd-and-secrets"},"CI/CD and Secrets"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Inject sensitive values via CI secrets (e.g., GitHub Actions secrets, OIDC + SSM/Secrets Manager)"),(0,t.yg)("li",{parentName:"ul"},"Do not commit secrets to ",(0,t.yg)("inlineCode",{parentName:"li"},".env")," files"),(0,t.yg)("li",{parentName:"ul"},"For CI, export variables before running ",(0,t.yg)("inlineCode",{parentName:"li"},"nx"),"/",(0,t.yg)("inlineCode",{parentName:"li"},"cdk")," commands")),(0,t.yg)("p",null,"GitHub Actions example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'- name: Export env\n  run: |\n    echo "LOG_LEVEL=warn" >> $GITHUB_ENV\n    echo "ENABLE_DLQ=true" >> $GITHUB_ENV\n- name: Deploy\n  run: npx nx deploy orders --configuration=prod\n')),(0,t.yg)("h2",{id:"best-practices"},"Best Practices"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"No secrets in git"),": use AWS Secrets Manager/SSM for sensitive data"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Typed parsing"),": coerce types (",(0,t.yg)("inlineCode",{parentName:"li"},"Number"),", booleans) at the boundary"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Defaults"),": provide sane defaults for local dev"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Traceability"),": output critical config values as CloudFormation Outputs where useful (non-secret)"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Consistency"),": align env names with Nx configurations (",(0,t.yg)("inlineCode",{parentName:"li"},"dev"),", ",(0,t.yg)("inlineCode",{parentName:"li"},"staging"),", ",(0,t.yg)("inlineCode",{parentName:"li"},"prod"),")")))}g.isMDXComponent=!0},5680:(e,n,r)=>{r.d(n,{xA:()=>p,yg:()=>v});var a=r(6540);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),r.push.apply(r,a)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach(function(n){t(e,n,r[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))})}return e}function l(e,n){if(null==e)return{};var r,a,t=function(e,n){if(null==e)return{};var r,a,t={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var s=a.createContext({}),c=function(e){var n=a.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef(function(e,n){var r=e.components,t=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(r),u=t,v=d["".concat(s,".").concat(u)]||d[u]||g[u]||i;return r?a.createElement(v,o(o({ref:n},p),{},{components:r})):a.createElement(v,o({ref:n},p))});function v(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var i=r.length,o=new Array(i);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:t,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"}}]);