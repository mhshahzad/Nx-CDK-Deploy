"use strict";(self.webpackChunknx_cdk_plugin_docs=self.webpackChunknx_cdk_plugin_docs||[]).push([[5256],{645:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var o=t(8168),r=(t(6540),t(5680));const a={sidebar_position:2},i="CDK Context Files",c={unversionedId:"configuration/cdk-context",id:"configuration/cdk-context",title:"CDK Context Files",description:"CDK context files provide environment-specific settings that configure how your infrastructure is deployed across different stages.",source:"@site/docs/configuration/cdk-context.md",sourceDirName:"configuration",slug:"/configuration/cdk-context",permalink:"/nx-cdk-deploy/docs/configuration/cdk-context",draft:!1,editUrl:"https://github.com/mhshahzad/nx-cdk-deploy/tree/main/docs/docs/configuration/cdk-context.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Project Configuration",permalink:"/nx-cdk-deploy/docs/configuration/project-config"},next:{title:"Environment Variables",permalink:"/nx-cdk-deploy/docs/configuration/environment-variables"}},l={},s=[{value:"Context File Structure",id:"context-file-structure",level:2},{value:"cdk.json",id:"cdkjson",level:3},{value:"Per-project cdk.json (optional)",id:"per-project-cdkjson-optional",level:3},{value:"Supplying Context at Deploy Time",id:"supplying-context-at-deploy-time",level:2},{value:"Reading Context in Your CDK App",id:"reading-context-in-your-cdk-app",level:2},{value:"Nx Integration",id:"nx-integration",level:2},{value:"Examples",id:"examples",level:2},{value:"Select environment via Nx configuration",id:"select-environment-via-nx-configuration",level:3},{value:"Override context ad-hoc",id:"override-context-ad-hoc",level:3},{value:"Best Practices",id:"best-practices",level:2}],p={toc:s},d="wrapper";function u({components:e,...n}){return(0,r.yg)(d,(0,o.A)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"cdk-context-files"},"CDK Context Files"),(0,r.yg)("p",null,"CDK context files provide environment-specific settings that configure how your infrastructure is deployed across different stages."),(0,r.yg)("h2",{id:"context-file-structure"},"Context File Structure"),(0,r.yg)("p",null,"Each environment has its own context file:"),(0,r.yg)("h3",{id:"cdkjson"},"cdk.json"),(0,r.yg)("p",null,"Define app entry and reusable context. You can namespace by project and environment."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "app": "npx ts-node --prefer-ts-exts src/main.ts",\n  "context": {\n    "orders:dev": { "account": "111111111111", "region": "us-east-1" },\n    "orders:staging": { "account": "222222222222", "region": "us-east-1" },\n    "orders:prod": { "account": "333333333333", "region": "us-east-2" }\n  }\n}\n')),(0,r.yg)("h3",{id:"per-project-cdkjson-optional"},"Per-project cdk.json (optional)"),(0,r.yg)("p",null,"If your repo has multiple CDK apps, you can keep a ",(0,r.yg)("inlineCode",{parentName:"p"},"cdk.json")," near each app with its own context namespace."),(0,r.yg)("h2",{id:"supplying-context-at-deploy-time"},"Supplying Context at Deploy Time"),(0,r.yg)("p",null,"You can pass additional or overriding context via the CLI:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"cdk deploy -c env=dev\ncdk deploy -c account=111111111111 -c region=us-east-1\n")),(0,r.yg)("p",null,"When using Nx executors, context is typically derived from the Nx configuration you select:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"nx deploy orders --configuration=dev\n")),(0,r.yg)("p",null,"Map your Nx ",(0,r.yg)("inlineCode",{parentName:"p"},"dev/staging/prod")," to a specific context key (e.g., ",(0,r.yg)("inlineCode",{parentName:"p"},"orders:dev"),") inside your app code."),(0,r.yg)("h2",{id:"reading-context-in-your-cdk-app"},"Reading Context in Your CDK App"),(0,r.yg)("p",null,"Use ",(0,r.yg)("inlineCode",{parentName:"p"},"App.node.tryGetContext")," to fetch values and configure stacks accordingly."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"// src/main.ts\nimport { App, Stack, StackProps, Environment } from 'aws-cdk-lib';\n\nconst app = new App();\n\n// Example: select a context object by key \"orders:<env>\"\nconst envName = process.env.NX_TASK_TARGET_CONFIGURATION ?? process.env.ENV ?? 'dev';\nconst ctxKey = `orders:${envName}`;\nconst ctx = app.node.tryGetContext(ctxKey) || {};\n\nconst env: Environment = {\n  account: ctx.account,\n  region: ctx.region,\n};\n\nclass OrdersStack extends Stack {\n  constructor(scope: App, id: string, props?: StackProps) {\n    super(scope, id, props);\n    // define resources here using additional context values if needed\n  }\n}\n\nnew OrdersStack(app, `orders-${envName}`, { env });\n")),(0,r.yg)("p",null,"Notes:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"You can also read additional settings (e.g., table throughput, DLQ retention) via ",(0,r.yg)("inlineCode",{parentName:"li"},"app.node.tryGetContext('key')")," or environment variables.")),(0,r.yg)("h2",{id:"nx-integration"},"Nx Integration"),(0,r.yg)("p",null,"Define per-environment values in your Nx project target configurations and/or ",(0,r.yg)("inlineCode",{parentName:"p"},".env.*")," files, then translate them to CDK context keys in your app."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"See: ",(0,r.yg)("a",{parentName:"li",href:"/nx-cdk-deploy/docs/configuration/project-config"},"Project Config")),(0,r.yg)("li",{parentName:"ul"},"See: ",(0,r.yg)("a",{parentName:"li",href:"/nx-cdk-deploy/docs/configuration/environment-variables"},"Environment Variables")),(0,r.yg)("li",{parentName:"ul"},"See: ",(0,r.yg)("a",{parentName:"li",href:"/nx-cdk-deploy/docs/core-concepts/environment-management"},"Environment Management"))),(0,r.yg)("h2",{id:"examples"},"Examples"),(0,r.yg)("h3",{id:"select-environment-via-nx-configuration"},"Select environment via Nx configuration"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"nx deploy orders --configuration=staging\n")),(0,r.yg)("p",null,"App resolves ",(0,r.yg)("inlineCode",{parentName:"p"},"NX_TASK_TARGET_CONFIGURATION=staging"),", builds ",(0,r.yg)("inlineCode",{parentName:"p"},"orders:staging")," context key, and deploys with that account/region."),(0,r.yg)("h3",{id:"override-context-ad-hoc"},"Override context ad-hoc"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"npx cdk deploy -c orders:dev.account=999999999999 -c orders:dev.region=eu-west-1\n")),(0,r.yg)("p",null,"CDK allows dotted keys for nested overrides."),(0,r.yg)("h2",{id:"best-practices"},"Best Practices"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Namespace keys"),": use ",(0,r.yg)("inlineCode",{parentName:"li"},"<project>:<env>")," to avoid collisions across multiple apps."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Single source of truth"),": prefer storing account/region in one place (Nx config or cdk.json) and reference it consistently."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"No secrets"),": do not store secrets in context; use AWS Secrets Manager or SSM Parameter Store."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Bootstrap"),": ensure each ",(0,r.yg)("inlineCode",{parentName:"li"},"account/region")," pair is bootstrapped before first deploy."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Consistency"),": align context names with your Nx configurations (",(0,r.yg)("inlineCode",{parentName:"li"},"dev"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"staging"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"prod"),").")))}u.isMDXComponent=!0},5680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>y});var o=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach(function(n){r(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function c(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),s=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return o.createElement(l.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},g=o.forwardRef(function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(t),g=r,y=d["".concat(l,".").concat(g)]||d[g]||u[g]||a;return t?o.createElement(y,i(i({ref:n},p),{},{components:t})):o.createElement(y,i({ref:n},p))});function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=g;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c[d]="string"==typeof e?e:r,i[1]=c;for(var s=2;s<a;s++)i[s]=t[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}g.displayName="MDXCreateElement"}}]);